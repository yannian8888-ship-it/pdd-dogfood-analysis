name: pdd-dogfood-analysis

on:
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install playwright@1.46.0
          npx playwright install --with-deps chromium

      - name: Analyze PDD dog food market
        run: |
          cat > analyze.js << 'SCRIPT'
          const { chromium } = require('playwright');
          const fs = require('fs');
          const path = require('path');

          // 确保目录存在
          function ensureDir(dir) {
            if (!fs.existsSync(dir)) {
              fs.mkdirSync(dir, { recursive: true });
            }
          }

          async function analyzeDogFood() {
            console.log('='.repeat(60));
            console.log('拼多多宠物狗粮市场分析');
            console.log('='.repeat(60));
            
            // 创建输出目录
            ensureDir('results');
            ensureDir('results/screenshots');
            ensureDir('results/data');
            
            const browser = await chromium.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
              ]
            });

            try {
              const context = await browser.newContext({
                locale: 'zh-CN',
                timezoneId: 'Asia/Shanghai',
                viewport: { width: 1920, height: 1080 },
                // PC端设置
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                extraHTTPHeaders: {
                  'Accept-Language': 'zh-CN,zh;q=0.9',
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                }
              });

              const page = await context.newPage();
              
              // 注入反检测代码
              await page.addInitScript(() => {
                Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
                window.chrome = { runtime: {} };
                Object.defineProperty(navigator, 'plugins', { get: () => [1,2,3,4,5] });
              });

              const timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);
              
              // 步骤1: 访问拼多多PC端主页
              console.log('\n步骤1: 访问拼多多PC端主页');
              await page.goto('https://www.pinduoduo.com', {
                waitUntil: 'domcontentloaded',
                timeout: 30000
              });
              await page.waitForTimeout(3000);
              
              // 截图1
              await page.screenshot({ 
                path: `results/screenshots/1_homepage_${timestamp}.png`,
                fullPage: false
              });
              console.log('✓ 主页加载成功');

              // 步骤2: 查找并使用搜索框
              console.log('\n步骤2: 执行搜索');
              
              // 查找搜索框
              const searchInput = await page.$('input[type="text"], input[placeholder*="搜索"], input.search-input');
              
              if (searchInput) {
                console.log('✓ 找到搜索框');
                await searchInput.click();
                await page.waitForTimeout(500);
                
                // 清空并输入
                await searchInput.fill('');
                await searchInput.type('宠物狗粮', { delay: 100 });
                await page.waitForTimeout(1000);
                
                // 按回车搜索
                await page.keyboard.press('Enter');
                console.log('✓ 已提交搜索');
                
                // 等待页面跳转
                await page.waitForLoadState('networkidle');
                await page.waitForTimeout(5000);
              } else {
                // 如果找不到搜索框，直接访问搜索URL
                console.log('未找到搜索框，直接访问搜索URL');
                const searchUrl = 'https://www.pinduoduo.com/home/search/?key=宠物狗粮';
                await page.goto(searchUrl, {
                  waitUntil: 'networkidle',
                  timeout: 60000
                });
              }

              // 截图2：搜索结果页
              await page.screenshot({ 
                path: `results/screenshots/2_search_results_${timestamp}.png`,
                fullPage: true
              });

              // 检查是否有登录弹窗
              const loginModal = await page.$('.login-layer, .login-modal, [class*="login-wrap"]');
              if (loginModal) {
                console.log('检测到登录弹窗，尝试关闭');
                try {
                  // 尝试点击关闭按钮
                  const closeBtn = await page.$('.close-btn, .modal-close, [class*="close"]');
                  if (closeBtn) {
                    await closeBtn.click();
                    await page.waitForTimeout(2000);
                  }
                  // 或者点击页面其他地方
                  await page.click('body', { position: { x: 100, y: 100 } });
                  await page.waitForTimeout(2000);
                } catch (e) {
                  console.log('关闭登录弹窗失败');
                }
              }

              // 步骤3: 滚动加载更多商品
              console.log('\n步骤3: 加载商品数据');
              let previousHeight = 0;
              for (let i = 0; i < 5; i++) {
                const currentHeight = await page.evaluate(() => document.body.scrollHeight);
                if (currentHeight === previousHeight) break;
                
                previousHeight = currentHeight;
                await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
                await page.waitForTimeout(3000);
                console.log(`✓ 滚动加载第 ${i + 1} 次`);
              }

              // 步骤4: 提取商品数据
              console.log('\n步骤4: 提取商品数据');
              
              // 尝试多种选择器
              const productSelectors = [
                '.goods-item',
                '.J_goods_item',
                '[class*="goods-item"]',
                '.goods-list .item',
                'a[href*="/goods.html"]'
              ];

              let products = [];
              let usedSelector = '';
              
              for (const selector of productSelectors) {
                products = await page.$$(selector);
                if (products.length > 0) {
                  usedSelector = selector;
                  console.log(`✓ 使用选择器 "${selector}" 找到 ${products.length} 个商品`);
                  break;
                }
              }

              if (products.length === 0) {
                console.log('❌ 未找到商品，保存页面源码用于调试');
                const html = await page.content();
                fs.writeFileSync(`results/data/debug_source_${timestamp}.html`, html);
                
                // 创建错误报告
                const errorReport = {
                  status: 'error',
                  message: '未找到商品数据',
                  timestamp: new Date().toISOString(),
                  url: page.url()
                };
                fs.writeFileSync(`results/data/error_report_${timestamp}.json`, JSON.stringify(errorReport, null, 2));
                
                await browser.close();
                return;
              }

              // 提取数据
              const results = [];
              console.log('开始提取商品详情...');
              
              for (let i = 0; i < Math.min(products.length, 100); i++) {
                try {
                  const product = products[i];
                  
                  const data = await product.evaluate(el => {
                    // 通用文本提取函数
                    const getText = (selectors) => {
                      const selectorArray = Array.isArray(selectors) ? selectors : [selectors];
                      for (const sel of selectorArray) {
                        const elem = el.querySelector(sel);
                        if (elem) return elem.textContent.trim();
                      }
                      return '';
                    };

                    // 提取各项数据
                    const title = getText(['.goods-name', '.goods-title', '[class*="title"]', 'p']) || 
                                 el.textContent.trim().split('\n')[0];
                    
                    const priceText = getText(['.price', '.goods-price', '[class*="price"]', '.red']);
                    
                    const salesText = getText(['.sales-tip', '.goods-sales', '[class*="sales"]', '[class*="sold"]']);
                    
                    const shop = getText(['.shop-name', '.goods-shop', '[class*="shop"]', '.mall-name']);
                    
                    const link = el.querySelector('a')?.href || '';

                    return { title, priceText, salesText, shop, link };
                  });

                  // 只保留包含狗粮相关关键词的商品
                  const keywords = ['狗粮', '犬粮', '狗狗', '幼犬', '成犬', 'dog', 'puppy'];
                  const isRelevant = keywords.some(kw => data.title.toLowerCase().includes(kw));
                  
                  if (isRelevant && data.title) {
                    // 解析价格
                    let price = 0;
                    const priceMatch = data.priceText.match(/[\d.]+/);
                    if (priceMatch) {
                      price = parseFloat(priceMatch[0]);
                    }

                    // 解析销量
                    let sales = 0;
                    if (data.salesText) {
                      // 处理各种格式：已拼10万+件、10万+人付款、月销1000+等
                      const patterns = [
                        /已拼([\d.]+)([万+]?)件?/,
                        /([\d.]+)([万+]?)人付款/,
                        /月销([\d.]+)([万+]?)/,
                        /([\d.]+)([万+]?)件?已售/
                      ];
                      
                      for (const pattern of patterns) {
                        const match = data.salesText.match(pattern);
                        if (match) {
                          sales = parseFloat(match[1]);
                          if (match[2] === '万') {
                            sales *= 10000;
                          } else if (match[2] === '+') {
                            sales = Math.max(sales * 10000, 100000);
                          }
                          break;
                        }
                      }
                    }

                    results.push({
                      title: data.title,
                      price: price,
                      priceDisplay: `¥${price.toFixed(2)}`,
                      sales: sales,
                      salesDisplay: data.salesText || '暂无销量',
                      shop: data.shop || '未知店铺',
                      link: data.link
                    });
                  }
                } catch (e) {
                  // 忽略单个商品的错误
                }
                
                // 每处理10个商品输出一次进度
                if ((i + 1) % 10 === 0) {
                  console.log(`✓ 已处理 ${i + 1} 个商品`);
                }
              }

              console.log(`\n✓ 成功提取 ${results.length} 个狗粮相关商品`);

              // 步骤5: 数据分析和排序
              console.log('\n步骤5: 数据分析');
              
              // 按销量排序
              results.sort((a, b) => b.sales - a.sales);
              
              // 生成排名
              results.forEach((item, index) => {
                item.rank = index + 1;
              });

              // 保存原始数据
              const rawData = {
                searchKeyword: '宠物狗粮',
                searchTime: new Date().toISOString(),
                totalProducts: results.length,
                products: results
              };
              
              fs.writeFileSync(
                `results/data/raw_data_${timestamp}.json`,
                JSON.stringify(rawData, null, 2)
              );

              // 生成TOP20报告
              console.log('\n步骤6: 生成分析报告');
              
              const top20 = results.slice(0, 20);
              
              // 生成易读的文本报告
              let textReport = '拼多多宠物狗粮销量TOP20分析报告\n';
              textReport += '=' .repeat(80) + '\n';
              textReport += `生成时间: ${new Date().toLocaleString('zh-CN')}\n`;
              textReport += `数据来源: 拼多多PC端搜索"宠物狗粮"\n`;
              textReport += `总计分析商品数: ${results.length}\n`;
              textReport += '=' .repeat(80) + '\n\n';
              
              textReport += 'TOP 20 销量排行榜\n';
              textReport += '-' .repeat(80) + '\n';
              
              top20.forEach(item => {
                textReport += `\n排名: ${item.rank}\n`;
                textReport += `商品: ${item.title}\n`;
                textReport += `价格: ${item.priceDisplay}\n`;
                textReport += `销量: ${item.salesDisplay}\n`;
                textReport += `店铺: ${item.shop}\n`;
                textReport += '-' .repeat(40) + '\n';
              });

              // 价格分析
              const prices = results.filter(r => r.price > 0).map(r => r.price);
              const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length;
              const minPrice = Math.min(...prices);
              const maxPrice = Math.max(...prices);

              textReport += '\n\n价格分析\n';
              textReport += '=' .repeat(80) + '\n';
              textReport += `平均价格: ¥${avgPrice.toFixed(2)}\n`;
              textReport += `最低价格: ¥${minPrice.toFixed(2)}\n`;
              textReport += `最高价格: ¥${maxPrice.toFixed(2)}\n`;

              
